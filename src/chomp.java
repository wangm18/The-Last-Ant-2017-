import java.applet.AudioClip;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
/** <p>An object implementing {@link AudioClip java.applet.AudioClip} with the data from chomp.wav hard-coded into it.</p>
 * <p>Created with the <a href="http://stephengware.com/projects/soundtoclass">SoundToClass tool</a>, by Stephen G. Ware.</p>
 * @author Stephen G. Ware */
public class chomp implements AudioClip {
	private byte[] data;
	private AudioFormat format;
	private DataLine.Info lineInfo = null;
	private PlayThread playThread = null;
	private LoopThread loopThread = null;
	private static final long serialVersionUID = 5020;
	private static byte[] data0(){ return new byte[] {124,124,124,124,124,124,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128}; }
	private static byte[] data1(){ return new byte[] {-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,121,-128,-114,-123,120,-104,-63,114,17,27,93,-99,-44,-54,-106,-86,-53,-76,119,88,-105,-99,78,83,71,16,84,-79,90,27,-122,-29,-24,-48,-95,100,73,119,-99,89,33,60,104,-113,-54,-40,-97,-115,-81,-68,-101,109,82,68,80,118,118,99,116,-119,-103,-101,-102,-118,120,-124,123,90,82,87,84,107,126,118,127,-110,-105,-111,-100,-108,118,110,109,115,98,91,106,109,125,-100,-83,-82,-90,-104,-91,-123,102,126,-115,122,118,100,59,80,-107,-107,-94,-74,-65,-50,-53,-113,118,94,108,126,66,115,-99,-123,-107,-70,-82,103,-116,-79,104,72,116,106,83,-112,-110,-125,-114,-99,-73,-81,113,107,-120,-111,126,92,71,81,118,-114,-109,115,-118,-89,-100,-103,-105,-67,-8,-30,70,0,-93,-18,68,-122,-111,0,37,-57,-67,-78,-12,-70,-67,-7,120,53,88,11,27,-58,-46,26,67,-36,123,-111,-7,-13,-89,36,13,18,74,74,13,16,111,-30,-18,-26,-26,-26,-14,-41,75,10,24,25,21,27,70,-96,-22,-21,-26,-26,-25,-16,-50,82,16,22,25,25,23,10,79,-39,-15,-26,-26,-25,-16,-54,81,16,22,25,24,19,40,125,-37,-18,-26,-26,-23,-17,-79,54,14,24,25,23,18,61,-108,-34,-20,-26,-26,-26,-18,-26,111,16,20,25,25,24,12,64,-53,-13,-26,-26,-21,-40,-108,71,29,22,25,23,11,78,-40,-15,-26,-26,-26,-24,-11,-82,35,14,25,25,25,20,30,121,-30,-18,-26,-26,-24,-23,-49,118,25,19,25,19,52,70,83,-50,-14,-26,-25,-19,-56,-111,-122,88,32,19,22,48,86,-105,-53,-31,-23,-26,-20,-33,-92,85,23,21,25,21,43,103,-107,-62,-21,-16,-53,121,119,-99,118,70,47,22,23,67,-127,-117,-77,-24,-47,-46,-10,-81,35,31,84,50,34,99,-122,-128,85,-120,-29,-26,-78,-73,-97,121,108,31,19,72,46,49,-76,-43,-63,-64,-40,-14,-62,123,112,65,60,-119,112,10,32,-72,-9,97,0,66,-54,-76,-75,-76,-34,-27,-66,-59,-110,104,31,16,31,42,35,29,45,103,-101,-31,-14,-34,-104,-64,-62,-124,58,15,21,16,96,-19,-94,12,106,-22,-11,-42,-123,73,72,103,71,24,14,25,-110,-14,-30,-48,-84,-72,-21,-50,-67,-96,66,16,22,100,87,5,76,-47,-45,-49,-27,-26,-98,109,116,-102,110,31,19,15,37,-98,-39,-93,-93,-25,-22,-27,-33,92,8,14,26,-94,-18,118,82,-36,-8,-18,99,3,-94,-51,50,12,20,18,100,-41,-17,-23,-32,-53,-29,-16,-90,37,13,9,61,-43,-1,-113,13,3,118,-6,-15,99,0,70,-36,-1,-60,48,0,37,-71,-1,-72,29,1,119,-16,-3,-91,24,0,95,-12,-96,12,15,114,-34,-17,-8,-93,27,110,-66,97,18,32,11,57,-45,-17,120,89,-72,-22,108,87,-100,109,-100,94,-115,124,5,60,-61,-8,-112,24,60,-99,-58,-24,-10,-109,9,42,-83,-61,-103,53,44,-81,-20,-21,-61,48,13,100,-108,-90,-30,-117,17,106,-72,-74,116,104,-98,-78,-75,-64,65,8,20,74}; }
	private static byte[] data2(){ return new byte[] {100,55,65,107,-62,-19,-68,-64,-70,-102,-108,-128,-104,-97,122,110,-115,-116,110,-104,-82,60,21,113,-102,106,45,17,32,90,-46,-14,-25,-14,-61,56,11,16,22,-102,-10,-19,-13,-117,17,12,23,-118,-29,-38,-26,-67,-56,-6,-93,27,14,28,30,-113,-51,47,0,-123,-12,-24,-30,-39,114,31,-95,-21,88,7,24,43,79,-82,-86,92,102,-110,-37,-15,-51,-43,-70,36,21,84,97,34,33,-110,-50,-19,-51,122,54,37,95,117,-117,-13,-70,29,19,-86,-1,-112,16,1,63,-42,-12,-27,-12,-57,56,-108,-1,-19,98,4,10,118,-123,96,-83,121,-53,-15,-24,-15,-76,41,0,115,-18,122,16,3,90,-49,-107,87,18,55,-45,-8,-16,-100,35,16,13,44,-78,-53,-51,-31,-60,-23,-43,102,42,13,49,-102,-79,-86,-47,75,4,91,91,14,63,-69,-14,-25,-24,-12,-84,35,14,24,13,82,-106,83,-96,-16,-23,-22,-30,-64,-117,84,96,41,14,28,68,113,-103,-77,-41,-23,-28,-19,-26,117,48,38,19,24,63,98,-125,125,-80,-17,-20,-24,-81,75,21,28,25,12,64,-73,-75,-93,-82,-33,-18,-17,-92,63,32,23,18,41,88,42,66,-81,-23,-18,-22,-96,109,52,83,-64,106,22,32,23,70,-93,-81,-127,-98,-50,-20,-8,-111,11,16,100,-46,-2,-80,38,3,52,-75,-9,-37,-108,35,15,-89,-1,-99,26,8,39,-95,-8,-15,118,12,79,-60,-1,-83,27,0,100,-20,-9,-123,19,15,30,91,-43,-2,119,0,91,-25,-11,-19,-128,10,24,-109,-41,110,7,18,-99,-16,-31,-12,-103,8,86,-18,-28,-122,49,17,14,60,-75,-69,95,121,-58,-18,-11,-79,47,13,13,65,-45,-69,66,111,-83,-54,-31,-38,114,51,68,93,126,103,26,8,62,-60,-11,-28,-52,-89,-104,-87,127,35,17,20,30,93,-55,-45,-39,-70,-88,-9,-66,46,21,29,18,82,-54,-40,-46,-98,-109,-54,-117,109,-124,60,111,-46,-123,71,-127,-107,78,104,-118,-118,-112,-96,-92,104,-112,-31,111,16,103,-56,-116,61,-127,-37,-109,98,-108,102,43,51,87,109,125,-69,-14,-60,-106,-99,54,46,85,62,-117,-81,-123,-60,-68,42,-103,-55,33,42,-62,-36,-100,-57,-31,-92,123,96,15,24,-89,-82,100,-59,-86,90,-89,-83,-125,-119,120,-117,99,61,-90,-111,40,-71,-86,34,-97,-124,30,-108,-12,-33,82,9,110,-81,-90,125,77,96,107,-109,-15,-46,81,85,-114,-106,-84,-123,42,6,54,-114,-107,-107,-108,112,-103,-15,-26,-116,77,53,14,73,-110,105,79,76,-98,-20,-17,-28,-116,73,111,99,82,71,23,28,85,111,-99,-28,-44,-51,-11,-71,61,74,57,14,89,-105,106,-86,-89,41,94,-75,-26,-22,-54,78,19,64,102,116,49,11,81,-52,-25,-23,-38,-127,69,-99,-72,91,32,36,69,-121,-80,-97,76,34,-120,-89,-46,-8,-64,89,-114,-101,51,36,36,12,72,-46,-68,-93,-94,-111,-34,-75,89,78,65,48,105,-109,-102,124,-105,-54,-95,-124,125,-114,-120,-116,-95,104,18,78,-92,123,77,-85,-24,-88,103,-44,-51,33,50,-57,84,83,-31,105,14,-106,-69,92,116,-77,-109,-113,-40,-25,119,20,28,-115,-116,85,107,60,80,-37,-7,-115,35,106,-45,-61,-87,-125,40,21,107,-63,-128,115,-56,-110,99,-53,-65,57,11,64,-113,-94,120,94,47,97,-91,-32,-53,-80,124,93,102,-120,86,24,74,108,118,-97,-69,120,116,-39,-55,126,-94,-79,70,78,124,57,13,42,100,-99,-32,-20,-26,-21,-29,-108,44,14,42,55,28,21,18,58,-84,-17,-23,-24,-17,-86,84,-122,116,26,19,14,52,-96,-63,-45,-51,-37,-23,-15,-38,81,4,50,77,30,28,18,44,-76,-13,-20,-31,-79,-125,117,124,69,21,22,12,50,-61,-23,-46,-28,-22,-19,-81,-123,-90,73,13,24,14,33,-74,-80,78,-70,-13,-25,-19,-21,117,15,92,95,18,17,54,-117,-32,-21,-40,-33,-21,-15,-105,46,51,38,20,66,71,22,97,-73,-64,-23,-13,-123,77,-61,-96,40,16,77,74,51,126,-35,-32,-89,-90,-35,-63,-118,46,7,62,-127,-114,112,20,109,-16,-42,-83,126,79,120,-92,-78,99,14,29,120,-82,-90,-114,-126,-116,-71,-52,-108,105,82,80,116,123,84,83,96,-121,-76,-58,-84,-111,-91,-126,91,101,104,95,112,105,85,-108,-58,-67,-94,107,102,-66,-84,106,90,47,35,84,-127,-95,-70,-114,82,-92,-10,-77,83,60,62,82,112,99,77,109,-96,-75,-77,-82,-77,-89,124,95,71,79,96,121,115,95,-127,-109,-79,-68,-114,-116,-79,125,87,98,105,76,43,65,-97,-39,-75,-76,-45,-89,104,93,105,70,76,101,96,101,-79,-47,-100,-103,-73,120,100,-111,123,89,82,92,91,100,-114,-58,-42,-114,122,-95,-92,-95,121,93,89,59,112,-91,-106,-110,115,110,-75,-67,113,110,-93,-116,102,87,89,-118,-105,121,88,-121,-96,-96,-53,125,95,-113,37,110,-3,-50,53,1}; }
	private static byte[] data3(){ return new byte[] {49,104,-89,-1,-55,40,6,-98,-1,-108,14,2,58,-48,-1,-55,45,9,-95,-12,-48,97,24,25,18,-102,-6,94,26,124,120,-87,-4,-81,42,95,-101,61,26,77,71,-119,-25,-10,127,38,-87,-77,52,14,15,85,-55,-46,-86,84,115,-29,-34,126,67,48,55,125,-42,-99,40,82,-114,112,123,-78,-100,75,-99,-7,-83,75,73,65,22,114,-19,-98,22,50,-108,-24,-14,-79,102,102,124,69,50,90,65,70,-65,-76,-92,-28,-69,-127,-111,-122,97,96,90,78,77,61,87,-62,-55,-82,-93,-114,-76,-126,-109,-48,87,0,61,-94,-96,-89,-97,80,-102,-10,-74,119,123,94,48,86,-113,115,100,100,105,-55,-8,-106,81,-101,126,101,-99,119,13,46,-60,-12,-85,127,72,95,-28,-42,67,20,74,123,-75,-105,106,-125,-114,117,-87,-84,-120,-99,-122,118,110,90,-75,-79,34,27,-89,-31,-109,124,56,30,-69,-17,101,73,73,80,-45,-41,53,43,-82,-67,-98,-108,86,103,-23,-63,60,26,81,96,-92,-19,102,23,-64,-7,-117,57,16,69,-55,-87,80,72,80,-92,-1,-55,47,0,51,-48,-10,99,11,46,93,-34,-32,60,0,79,-58,-18,-61,79,36,-106,-35,-17,-64,47,0,69,-49,-5,-60,99,49,38,112,-22,-26,71,0,80,-31,-1,-86,23,16,-119,-16,-8,124,2,35,-121,-32,-16,104,0,68,-33,-21,-95,109,47,70,-50,-9,-113,37,45,79,-122,-103,93,94,-111,-81,-69,-128,-120,109,57,-56,-69,16,108,-34,71,118,-25,72,32,-53,-60,105,-111,123,63,124,-73,-95,101,93,99,126,-28,-63,69,91,125,-111,-68,-91,-122,52,18,-96,-9,-112,73,117,116,124,-110,127,-120,107,45,119,-45,-78,-115,93,76,-96,-56,-92,105,68,96,-97,-60,-107,78,55,92,-67,-74,97,95,93,123,-59,-87,93,100,-103,-99,124,113,116,117,-127,-94,-99,112,95,-117,-90,-104,116,103,104,96,120,-110,105,106,113,127,-95,-113,125,125,114,126,117,107,106,107,-96,-87,95,88,-85,-81,-114,122,76,98,-92,-97,121,97,89,125,-81,-74,-109,52,67,-90,-88,-91,-127,63,76,-102,-53,-104,47,61,-77,-62,-112,126,102,119,-104,-105,118,69,48,-111,-55,-121,103,98,117,-87,-86,110,83,101,-115,-99,-104,124,98,127,-95,-118,127,-125,-126,-118,-117,119,124,-115,-128,122,-125,124,-125,-100,-99,106,93,124,-101,-114,119,107,122,113,120,-84,-91,79,82,-105,-81,-116,110,104,107,-115,-84,-107,108,102,122,-110,-102,121,114,124,-127,-99,-102,125,-127,-125,-127,-109,-126,86,98,-123,-105,-117,112,-126,-110,-114,-112,-123,110,121,-125,-118,-110,-124,122,125,127,-114,-107,-128,126,-121,-127,124,-127,-115,123,97,120,-108,-117,-125,-120,-127,116,117,-115,-107,121,105,112,123,-118,-124,111,105,113,-128,-114,-121,125,-128,-128,-123,-116,-128,114,111,119,-122,124,127,-118,120,124,-113,-121,119,-118,-112,123,114,-122,-118,116,110,111,100,124,-114,123,120,-120,-108,-107,-111,-126,116,102,116,-127,103,83,99,126,-95,-83,-103,-107,-117,126,-117,-115,103,89,95,103,-127,-107,-124,125,-117,-106,-107,-114,123,114,118,113,114,126,-124,122,-120,-106,-122,-117,-107,125,123,-128,115,117,-127,117,121,-115,-118,-111,-108,-117,-114,-115,-124,124,107,109,121,120,127,-119,-128,-117,-109,-128,-124,-117,119,117,-123,-121,121,114,124,-123,-123,-115,-113,-127,-125,-116,-115,-117,120,99,108,-125,-117,-115,124,118,-116,-111,-113,-123,115,120,-120,-119,125,115,123,-123,-124,-115,-117,-126,-124,-124,-122,-123,125,117,120,125,-126,-122,-119,-119,-123,-125,-117,-126,112,112,121,122,120,127,-126,-125,-118,-123,-125,-119,-125,-128,126,121,117,120,118,122,-126,127,-122,-122,-127,-126,-123,-128,123,122,125,-127,118,109,127,-115,-117,-127,115,-128,-98,-117,122,-120,104,109,-94,-121,86,105,-121,-114,-114,123,104,114,123,-128,-120,120,109,-125,-123,-127,-115,-123,122,-126,-123,126,127,-124,126,118,124,-125,120,121,-125,-124,-127,-128,127,-121,-124,120,124,-127,-128,-126,-124,127,124,-125,-126,127,123,122,-125,-125,127,-123,-124,123,-126,-117,127,-128,-120,-124,-120,-117,-125,-127,-124,-123,-123,-126,124,118,126,-120,-123,-127,126,127,-125,-124,-121,-126,127,-127,127,-128,-125,-120,-117,-125,-127,-118,-124,121,123,-125,-125,-119,-107,-124,99,103,-123,-111,-115,-117,-125,124,127,-115,-110,-127,115,120,-128,-126,-126,126,119,120,-124,-118,-121,-126,-128,125,-128,-117,-126,117,122,127,-126,-119,-121,-126,125,127,-123,-126,124,119,122,123,124,-127,126,123,127,-126,127,-126,-121,-128,121,-126,-124,125,126,126,125,-125,-122,125,121,-127,-124,-123,-124,123,117,122,-126,-123,126,119,121,-128,-125,-125,-127,127,123,119,124,-126,-126,126,127,126,-128,-125,-127,125,125,122,123,-127,127,127,-128,123,125,-126,-128,-126,126,124,-125,-124,127,122,121,125,-125,-123,-127,126,-128,-125,-125,-126,-124,127,122,-128,-123}; }
	private static byte[] data4(){ return new byte[] {-127,-127,127,123,-127,-122,-126,125,126,-126,-124,-128,-127,-126,125,126,-126,127,-126,126,-125,-118,-126,126,-124,127,-125,-119,127,127,-127,-126,-120,-123,127,-127,-125,-126,-124,-127,-127,-125,-123,-124,-124,-123,-123,-126,-127,-123,-124,127,-126,-124,-128,127,-127,-128,-128,-127,127,127,127,-126,-125,-127,-127,-126,-127,127,126,126,-127,-126,-127,-128,127,127,127,126,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-128,-128,-128,-128,-128}; }
	private static byte[] getData(){
		byte[] data = new byte[5020];
		System.arraycopy(data0(), 0, data, 0, 1024);
		System.arraycopy(data1(), 0, data, 1024, 1024);
		System.arraycopy(data2(), 0, data, 2048, 1024);
		System.arraycopy(data3(), 0, data, 3072, 1024);
		System.arraycopy(data4(), 0, data, 4096, 924);
		return data;
	}
	/** Constructs a new AudioClip with the data from chomp.wav. */
	public chomp(){
		data = getData();
		format = new AudioFormat(AudioFormat.Encoding.PCM_UNSIGNED, (float)(11025.0), 8, 1, 1, (float)(11025.0), false);
		lineInfo = new DataLine.Info(SourceDataLine.class, format, AudioSystem.NOT_SPECIFIED);
		try{ AudioSystem.getLine(lineInfo); }
		catch(IllegalArgumentException ex){ lineInfo = null; }
		catch(LineUnavailableException e){}
	}
	/** A separate thread for playing chomp.wav. */
	private class PlayThread extends Thread {
		private byte[] data;
		private AudioFormat format;
		private DataLine.Info lineInfo;
		private SourceDataLine line = null;
		private boolean playing = true;
		public PlayThread(byte[] d, AudioFormat f, DataLine.Info i){ data = d; format = f; lineInfo = i; }
		public void run(){
			try{
				line = (SourceDataLine) AudioSystem.getLine(lineInfo);
				line.open(format, AudioSystem.NOT_SPECIFIED);
				line.start();
				int written = 0;
				int available;
				while(written < data.length && playing){
					available = Math.min(line.available(), data.length - written);
					line.write(data, written, available);
					written += available;
				}
				int frames = data.length / format.getFrameSize();
				while(line.getFramePosition() < frames && playing) Thread.sleep(0);
			}
			catch(InterruptedException ex){ playing = false; }
			catch(LineUnavailableException ex){}
			if(line != null){ line.stop(); line.flush(); line.close(); }
			playing = false;
		}
		public void interrupt(){ playing = false; }
		public boolean isPlaying(){ return playing; }
	}
	/** A separate thread for looping play of chomp.wav. */
	private class LoopThread extends Thread {
		private chomp clip;
		private boolean looping = true;
		public LoopThread(chomp c){ clip = c; }
		public void run(){
			while(looping){
				clip.play();
				while(clip.isPlaying() && looping){
					try{ Thread.sleep(0); }
					catch(InterruptedException ex){ looping = false; break; }
				}
			}
			if(!clip.isLooping()) clip.stop();
		}
		public void interrupt(){ looping = false; }
		public boolean isLooping(){ return looping; }
	}
	/** Plays chomp.wav from the beginning, even if it is already playing or looping. */
	public void play(){ if(lineInfo == null) return; doPlay(); }
	private synchronized void doPlay(){
		doStopPlay();
		playThread = new PlayThread(data, format, lineInfo);
		playThread.start();
	}
	/** Plays chomp.wav continuously until stopped. */
	public void loop(){ if(lineInfo == null) return; doLoop(); }
	private synchronized void doLoop(){
		doStopLoop();
		loopThread = new LoopThread(this);
		loopThread.start();
	}
	/** Stops play and looping of chomp.wav. */
	public void stop(){ if(lineInfo == null) return; doStop(); }
	private synchronized void doStop(){
		doStopPlay();
		doStopLoop();
	}
	private void doStopPlay(){
		if(playThread == null) return;
		if(playThread.isPlaying()) playThread.interrupt();
		playThread = null;
	}
	private void doStopLoop(){
		if(loopThread == null) return;
		if(loopThread.isLooping()) loopThread.interrupt();
		loopThread = null;
	}
	/** Tests if chomp.wav is currently playing or looping.
	 * @return <tt>true</tt> if playing or looping, <tt>false</tt> otherwise */
	public boolean isPlaying(){ if(lineInfo == null) return false; return doIsPlaying(); }
	private synchronized boolean doIsPlaying(){
		if(loopThread == null && playThread == null) return false;
		else if(loopThread == null) return playThread.isPlaying();
		else if(playThread == null) return loopThread.isLooping();
		else return loopThread.isLooping() && playThread.isPlaying();
	}
	/** Tests if chomp.wav is currently looping.
	 * @return <tt>true</tt> if looping, <tt>false</tt> otherwise */
	public boolean isLooping(){ if(lineInfo == null) return false; return doIsLooping(); }
	private synchronized boolean doIsLooping(){
		if(loopThread == null) return false;
		else return loopThread.isLooping();
	}
}